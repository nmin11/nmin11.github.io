<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Loko</title>
    <link>https://nmin11.github.io/en/tags/java/</link>
    <description>Recent content in java on Loko</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://nmin11.github.io/en/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Major GC Algorithms</title>
      <link>https://nmin11.github.io/en/blog/4-major-gc-algorithms/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://nmin11.github.io/en/blog/4-major-gc-algorithms/</guid>
      <description>This article was written with the intention of studying major GC algorithms more deeply while participating in the &amp;lsquo;Optimizing Java&amp;rsquo; study.
Serial GC The simplest GC implementation Only one thread performs GC after Stop-The-World (STW) Uses the mark-sweep-compact algorithm Not suitable for multi-threaded environments ❖ Enable Serial GC flag
java -XX:+UseSerialGC Parallel GC Default GC from Java 5 to 8 Also known as the Throughput Collector as it maximizes GC throughput Advantageous algorithm when there is sufficient memory space and a high number of cores Flags can be used to configure parameters such as the maximum number of threads, maximum pause time, and GC execution time ratio -XX:ParallelGCThreads=&amp;lt;N&amp;gt; -XX:MaxGCPauseMillis=&amp;lt;N&amp;gt; -XX:GCTimeRatio=&amp;lt;N&amp;gt; ❖ Enable Parallel GC flag</description>
    </item>
    
  </channel>
</rss>
